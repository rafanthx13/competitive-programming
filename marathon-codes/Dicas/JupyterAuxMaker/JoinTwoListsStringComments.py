# Execute no terminal -  VSCode - botao direito do mouse

# Exemplo de Entrada	Exemplo de Sa√≠da




str1 = """
0 0
0 1
0 2
0 3
0 4
0 5
0 6
0 7
0 8
0 9
0 10
0 11
0 12
0 13
0 14
0 15
0 16
0 17
0 18
0 19
0 20
1 0
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
1 11
1 12
1 13
1 14
1 15
1 16
1 17
1 18
1 19
1 20
2 0
2 1
2 2
2 3
2 4
2 5
2 6
2 7
2 8
2 9
2 10
2 11
2 12
2 13
2 14
2 15
2 16
2 17
2 18
2 19
2 20
3 0
3 1
3 2
3 3
3 4
3 5
3 6
3 7
3 8
3 9
3 10
3 11
3 12
3 13
3 14
3 15
3 16
3 17
3 18
3 19
3 20
4 0
4 1
4 2
4 3
4 4
4 5
4 6
4 7
4 8
4 9
4 10
4 11
4 12
4 13
4 14
4 15
4 16
4 17
4 18
4 19
4 20
5 0
5 1
5 2
5 3
5 4
5 5
5 6
5 7
5 8
5 9
5 10
5 11
5 12
5 13
5 14
5 15
5 16
5 17
5 18
5 19
5 20
6 0
6 1
6 2
6 3
6 4
6 5
6 6
6 7
6 8
6 9
6 10
6 11
6 12
6 13
6 14
6 15
6 16
6 17
6 18
6 19
6 20
7 0
7 1
7 2
7 3
7 4
7 5
7 6
7 7
7 8
7 9
7 10
7 11
7 12
7 13
7 14
7 15
7 16
7 17
7 18
7 19
7 20
8 0
8 1
8 2
8 3
8 4
8 5
8 6
8 7
8 8
8 9
8 10
8 11
8 12
8 13
8 14
8 15
8 16
8 17
8 18
8 19
8 20
9 0
9 1
9 2
9 3
9 4
9 5
9 6
9 7
9 8
9 9
9 10
9 11
9 12
9 13
9 14
9 15
9 16
9 17
9 18
9 19
9 20
10 0
10 1
10 2
10 3
10 4
10 5
10 6
10 7
10 8
10 9
10 10
10 11
10 12
10 13
10 14
10 15
10 16
10 17
10 18
10 19
10 20
11 0
11 1
11 2
11 3
11 4
11 5
11 6
11 7
11 8
11 9
11 10
11 11
11 12
11 13
11 14
11 15
11 16
11 17
11 18
11 19
11 20
12 0
12 1
12 2
12 3
12 4
12 5
12 6
12 7
12 8
12 9
12 10
12 11
12 12
12 13
12 14
12 15
12 16
12 17
12 18
12 19
12 20
13 0
13 1
13 2
13 3
13 4
13 5
13 6
13 7
13 8
13 9
13 10
13 11
13 12
13 13
13 14
13 15
13 16
13 17
13 18
13 19
13 20
14 0
14 1
14 2
14 3
14 4
14 5
14 6
14 7
14 8
14 9
14 10
14 11
14 12
14 13
14 14
14 15
14 16
14 17
14 18
14 19
14 20
15 0
15 1
15 2
15 3
15 4
15 5
15 6
15 7
15 8
15 9
15 10
15 11
15 12
15 13
15 14
15 15
15 16
15 17
15 18
15 19
15 20
16 0
16 1
16 2
16 3
16 4
16 5
16 6
16 7
16 8
16 9
16 10
16 11
16 12
16 13
16 14
16 15
16 16
16 17
16 18
16 19
16 20
17 0
17 1
17 2
17 3
17 4
17 5
17 6
17 7
17 8
17 9
17 10
17 11
17 12
17 13
17 14
17 15
17 16
17 17
17 18
17 19
17 20
18 0
18 1
18 2
18 3
18 4
18 5
18 6
18 7
18 8
18 9
18 10
18 11
18 12
18 13
18 14
18 15
18 16
18 17
18 18
18 19
18 20
19 0
19 1
19 2
19 3
19 4
19 5
19 6
19 7
19 8
19 9
19 10
19 11
19 12
19 13
19 14
19 15
19 16
19 17
19 18
19 19
19 20
20 0
20 1
20 2
20 3
20 4
20 5
20 6
20 7
20 8
20 9
20 10
20 11
20 12
20 13
20 14
20 15
20 16
20 17
20 18
20 19
20 20
"""

str2 = """
2
2
3
7
25
121
721
5041
40321
362881
3628801
39916801
479001601
6227020801
87178291201
1307674368001
20922789888001
355687428096001
6402373705728001
121645100408832001
2432902008176640001
2
2
3
7
25
121
721
5041
40321
362881
3628801
39916801
479001601
6227020801
87178291201
1307674368001
20922789888001
355687428096001
6402373705728001
121645100408832001
2432902008176640001
3
3
4
8
26
122
722
5042
40322
362882
3628802
39916802
479001602
6227020802
87178291202
1307674368002
20922789888002
355687428096002
6402373705728002
121645100408832002
2432902008176640002
7
7
8
12
30
126
726
5046
40326
362886
3628806
39916806
479001606
6227020806
87178291206
1307674368006
20922789888006
355687428096006
6402373705728006
121645100408832006
2432902008176640006
25
25
26
30
48
144
744
5064
40344
362904
3628824
39916824
479001624
6227020824
87178291224
1307674368024
20922789888024
355687428096024
6402373705728024
121645100408832024
2432902008176640024
121
121
122
126
144
240
840
5160
40440
363000
3628920
39916920
479001720
6227020920
87178291320
1307674368120
20922789888120
355687428096120
6402373705728120
121645100408832120
2432902008176640120
721
721
722
726
744
840
1440
5760
41040
363600
3629520
39917520
479002320
6227021520
87178291920
1307674368720
20922789888720
355687428096720
6402373705728720
121645100408832720
2432902008176640720
5041
5041
5042
5046
5064
5160
5760
10080
45360
367920
3633840
39921840
479006640
6227025840
87178296240
1307674373040
20922789893040
355687428101040
6402373705733040
121645100408837040
2432902008176645040
40321
40321
40322
40326
40344
40440
41040
45360
80640
403200
3669120
39957120
479041920
6227061120
87178331520
1307674408320
20922789928320
355687428136320
6402373705768320
121645100408872320
2432902008176680320
362881
362881
362882
362886
362904
363000
363600
367920
403200
725760
3991680
40279680
479364480
6227383680
87178654080
1307674730880
20922790250880
355687428458880
6402373706090880
121645100409194880
2432902008177002880
3628801
3628801
3628802
3628806
3628824
3628920
3629520
3633840
3669120
3991680
7257600
43545600
482630400
6230649600
87181920000
1307677996800
20922793516800
355687431724800
6402373709356800
121645100412460800
2432902008180268800
39916801
39916801
39916802
39916806
39916824
39916920
39917520
39921840
39957120
40279680
43545600
79833600
518918400
6266937600
87218208000
1307714284800
20922829804800
355687468012800
6402373745644800
121645100448748800
2432902008216556800
479001601
479001601
479001602
479001606
479001624
479001720
479002320
479006640
479041920
479364480
482630400
518918400
958003200
6706022400
87657292800
1308153369600
20923268889600
355687907097600
6402374184729600
121645100887833600
2432902008655641600
6227020801
6227020801
6227020802
6227020806
6227020824
6227020920
6227021520
6227025840
6227061120
6227383680
6230649600
6266937600
6706022400
12454041600
93405312000
1313901388800
20929016908800
355693655116800
6402379932748800
121645106635852800
2432902014403660800
87178291201
87178291201
87178291202
87178291206
87178291224
87178291320
87178291920
87178296240
87178331520
87178654080
87181920000
87218208000
87657292800
93405312000
174356582400
1394852659200
21009968179200
355774606387200
6402460884019200
121645187587123200
2432902095354931200
1307674368001
1307674368001
1307674368002
1307674368006
1307674368024
1307674368120
1307674368720
1307674373040
1307674408320
1307674730880
1307677996800
1307714284800
1308153369600
1313901388800
1394852659200
2615348736000
22230464256000
356995102464000
6403681380096000
121646408083200000
2432903315851008000
20922789888001
20922789888001
20922789888002
20922789888006
20922789888024
20922789888120
20922789888720
20922789893040
20922789928320
20922790250880
20922793516800
20922829804800
20923268889600
20929016908800
21009968179200
22230464256000
41845579776000
376610217984000
6423296495616000
121666023198720000
2432922930966528000
355687428096001
355687428096001
355687428096002
355687428096006
355687428096024
355687428096120
355687428096720
355687428101040
355687428136320
355687428458880
355687431724800
355687468012800
355687907097600
355693655116800
355774606387200
356995102464000
376610217984000
711374856192000
6758061133824000
122000787836928000
2433257695604736000
6402373705728001
6402373705728001
6402373705728002
6402373705728006
6402373705728024
6402373705728120
6402373705728720
6402373705733040
6402373705768320
6402373706090880
6402373709356800
6402373745644800
6402374184729600
6402379932748800
6402460884019200
6403681380096000
6423296495616000
6758061133824000
12804747411456000
128047474114560000
2439304381882368000
121645100408832001
121645100408832001
121645100408832002
121645100408832006
121645100408832024
121645100408832120
121645100408832720
121645100408837040
121645100408872320
121645100409194880
121645100412460800
121645100448748800
121645100887833600
121645106635852800
121645187587123200
121646408083200000
121666023198720000
122000787836928000
128047474114560000
243290200817664000
2554547108585472000
2432902008176640001
2432902008176640001
2432902008176640002
2432902008176640006
2432902008176640024
2432902008176640120
2432902008176640720
2432902008176645040
2432902008176680320
2432902008177002880
2432902008180268800
2432902008216556800
2432902008655641600
2432902014403660800
2432902095354931200
2432903315851008000
2432922930966528000
2433257695604736000
2439304381882368000
2554547108585472000
4865804016353280000
"""

def print_jointed_lists_strings(str1, str2, separator = " "):
    l1 = str1.split("\n")
    l2 = str2.split("\n")
    if(len(l1) != len(l2)):
        print("as listas nao tem os mesmso tamanhos")
        print("l1 tem", len(l1), "|", "l2 tem", len(l2))
        return ""
    l3 = []
    for index in range(1, len(l1) - 1):
        l3.append( l1[index] + separator + l2[index] )
    for v in l3:
        print(v)

def print_jointed_lists_strings_align(str1, str2, separator = " "):
    
    def quantos_espacos_por_como_barra_t(str0, len_max):
        qtd = len_max - len(str0)
        spaces = " "
        for _ in range(qtd):
            spaces = spaces + " "
        return spaces
        
    l1 = str1.split("\n")
    l2 = str2.split("\n")
    if(len(l1) != len(l2)):
        print("as listas nao tem os mesmso tamanhos")
        print("l1 tem", len(l1), "|", "l2 tem", len(l2))
        return ""
    l3 = []
    # percorre l1 para saber o elemento que tem maior len
    q = -1
    for i in l1:
        q = max(q, len(i))
    
    for index in range(1, len(l1) - 1):
        l3.append( l1[index] + quantos_espacos_por_como_barra_t(l1[index], q) + separator + l2[index] )
    for v in l3:
        print(v)

print_jointed_lists_strings_align(str1, str2)